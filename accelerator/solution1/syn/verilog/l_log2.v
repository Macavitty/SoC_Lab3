// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="l_log2,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.263000,HLS_SYN_LAT=173,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=2231,HLS_SYN_LUT=2384,HLS_VERSION=2019_1}" *)

module l_log2 (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 52'd1;
parameter    ap_ST_fsm_state2 = 52'd2;
parameter    ap_ST_fsm_state3 = 52'd4;
parameter    ap_ST_fsm_state4 = 52'd8;
parameter    ap_ST_fsm_state5 = 52'd16;
parameter    ap_ST_fsm_state6 = 52'd32;
parameter    ap_ST_fsm_state7 = 52'd64;
parameter    ap_ST_fsm_state8 = 52'd128;
parameter    ap_ST_fsm_state9 = 52'd256;
parameter    ap_ST_fsm_state10 = 52'd512;
parameter    ap_ST_fsm_state11 = 52'd1024;
parameter    ap_ST_fsm_state12 = 52'd2048;
parameter    ap_ST_fsm_state13 = 52'd4096;
parameter    ap_ST_fsm_state14 = 52'd8192;
parameter    ap_ST_fsm_state15 = 52'd16384;
parameter    ap_ST_fsm_state16 = 52'd32768;
parameter    ap_ST_fsm_state17 = 52'd65536;
parameter    ap_ST_fsm_state18 = 52'd131072;
parameter    ap_ST_fsm_state19 = 52'd262144;
parameter    ap_ST_fsm_state20 = 52'd524288;
parameter    ap_ST_fsm_state21 = 52'd1048576;
parameter    ap_ST_fsm_state22 = 52'd2097152;
parameter    ap_ST_fsm_state23 = 52'd4194304;
parameter    ap_ST_fsm_state24 = 52'd8388608;
parameter    ap_ST_fsm_state25 = 52'd16777216;
parameter    ap_ST_fsm_state26 = 52'd33554432;
parameter    ap_ST_fsm_pp0_stage0 = 52'd67108864;
parameter    ap_ST_fsm_pp0_stage1 = 52'd134217728;
parameter    ap_ST_fsm_pp0_stage2 = 52'd268435456;
parameter    ap_ST_fsm_pp0_stage3 = 52'd536870912;
parameter    ap_ST_fsm_pp0_stage4 = 52'd1073741824;
parameter    ap_ST_fsm_state54 = 52'd2147483648;
parameter    ap_ST_fsm_state55 = 52'd4294967296;
parameter    ap_ST_fsm_state56 = 52'd8589934592;
parameter    ap_ST_fsm_state57 = 52'd17179869184;
parameter    ap_ST_fsm_state58 = 52'd34359738368;
parameter    ap_ST_fsm_state59 = 52'd68719476736;
parameter    ap_ST_fsm_state60 = 52'd137438953472;
parameter    ap_ST_fsm_state61 = 52'd274877906944;
parameter    ap_ST_fsm_state62 = 52'd549755813888;
parameter    ap_ST_fsm_state63 = 52'd1099511627776;
parameter    ap_ST_fsm_state64 = 52'd2199023255552;
parameter    ap_ST_fsm_state65 = 52'd4398046511104;
parameter    ap_ST_fsm_state66 = 52'd8796093022208;
parameter    ap_ST_fsm_state67 = 52'd17592186044416;
parameter    ap_ST_fsm_state68 = 52'd35184372088832;
parameter    ap_ST_fsm_state69 = 52'd70368744177664;
parameter    ap_ST_fsm_state70 = 52'd140737488355328;
parameter    ap_ST_fsm_state71 = 52'd281474976710656;
parameter    ap_ST_fsm_state72 = 52'd562949953421312;
parameter    ap_ST_fsm_state73 = 52'd1125899906842624;
parameter    ap_ST_fsm_state74 = 52'd2251799813685248;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [51:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
reg    y_ap_vld;
reg   [5:0] k_0_reg_69;
reg   [31:0] pow_b_0_reg_81;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state28_pp0_stage1_iter0;
wire    ap_block_state33_pp0_stage1_iter1;
wire    ap_block_state38_pp0_stage1_iter2;
wire    ap_block_state43_pp0_stage1_iter3;
wire    ap_block_state48_pp0_stage1_iter4;
wire    ap_block_state53_pp0_stage1_iter5;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] tmp_y_0_reg_91;
reg   [4:0] i_0_reg_103;
wire   [31:0] grp_fu_114_p2;
reg   [31:0] reg_141;
wire    ap_CS_fsm_state6;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] icmp_ln15_reg_193;
reg   [0:0] icmp_ln15_reg_193_pp0_iter5_reg;
wire    ap_CS_fsm_state58;
reg   [31:0] x_read_reg_170;
wire   [31:0] grp_fu_119_p2;
reg   [31:0] tmp_2_reg_176;
wire   [31:0] grp_fu_131_p2;
reg   [31:0] b_reg_181;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_126_p2;
reg   [31:0] tmp_3_reg_188;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln15_fu_147_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state27_pp0_stage0_iter0;
wire    ap_block_state32_pp0_stage0_iter1;
wire    ap_block_state37_pp0_stage0_iter2;
wire    ap_block_state42_pp0_stage0_iter3;
wire    ap_block_state47_pp0_stage0_iter4;
wire    ap_block_state52_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln15_reg_193_pp0_iter1_reg;
reg   [0:0] icmp_ln15_reg_193_pp0_iter2_reg;
reg   [0:0] icmp_ln15_reg_193_pp0_iter3_reg;
reg   [0:0] icmp_ln15_reg_193_pp0_iter4_reg;
wire   [4:0] i_fu_153_p2;
reg   [4:0] i_reg_197;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] k_fu_164_p2;
reg   [5:0] k_reg_207;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state31_pp0_stage4_iter0;
wire    ap_block_state36_pp0_stage4_iter1;
wire    ap_block_state41_pp0_stage4_iter2;
wire    ap_block_state46_pp0_stage4_iter3;
wire    ap_block_state51_pp0_stage4_iter4;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_138_p1;
reg   [31:0] tmp_6_reg_212;
reg   [31:0] pow_b_1_reg_217;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] tmp_7_reg_222;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state27;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [5:0] ap_phi_mux_k_0_phi_fu_73_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_pow_b_0_phi_fu_84_p4;
wire    ap_block_pp0_stage1;
wire   [31:0] ap_phi_mux_tmp_y_0_phi_fu_95_p4;
reg   [4:0] ap_phi_mux_i_0_phi_fu_107_p4;
wire    ap_CS_fsm_state74;
reg   [31:0] grp_fu_114_p0;
reg   [31:0] grp_fu_114_p1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_state54;
reg   [31:0] grp_fu_126_p0;
reg   [31:0] grp_fu_126_p1;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_131_p0;
reg   [31:0] grp_fu_131_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state59;
wire   [31:0] grp_fu_138_p0;
wire    ap_block_pp0_stage4;
reg   [51:0] ap_NS_fsm;
wire    ap_block_state29_pp0_stage2_iter0;
wire    ap_block_state34_pp0_stage2_iter1;
wire    ap_block_state39_pp0_stage2_iter2;
wire    ap_block_state44_pp0_stage2_iter3;
wire    ap_block_state49_pp0_stage2_iter4;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state30_pp0_stage3_iter0;
wire    ap_block_state35_pp0_stage3_iter1;
wire    ap_block_state40_pp0_stage3_iter2;
wire    ap_block_state45_pp0_stage3_iter3;
wire    ap_block_state50_pp0_stage3_iter4;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage3_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 52'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

l_log2_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
l_log2_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .x(x),
    .y(grp_fu_131_p2),
    .y_ap_vld(y_ap_vld)
);

l_log2_fadd_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
l_log2_fadd_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_114_p0),
    .din1(grp_fu_114_p1),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

l_log2_fadd_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
l_log2_fadd_32ns_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_read_reg_170),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_119_p2)
);

l_log2_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
l_log2_fmul_32ns_cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_126_p0),
    .din1(grp_fu_126_p1),
    .ce(1'b1),
    .dout(grp_fu_126_p2)
);

l_log2_fdiv_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
l_log2_fdiv_32ns_dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_131_p0),
    .din1(grp_fu_131_p1),
    .ce(1'b1),
    .dout(grp_fu_131_p2)
);

l_log2_sitofp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
l_log2_sitofp_32neOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_138_p0),
    .ce(1'b1),
    .dout(grp_fu_138_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_193 == 1'd0))) begin
        i_0_reg_103 <= i_reg_197;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        i_0_reg_103 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_193 == 1'd0))) begin
        k_0_reg_69 <= k_reg_207;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        k_0_reg_69 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln15_reg_193_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        pow_b_0_reg_81 <= pow_b_1_reg_217;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        pow_b_0_reg_81 <= b_reg_181;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln15_reg_193_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_y_0_reg_91 <= grp_fu_114_p2;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_y_0_reg_91 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        b_reg_181 <= grp_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_197 <= i_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln15_reg_193 <= icmp_ln15_fu_147_p2;
        icmp_ln15_reg_193_pp0_iter1_reg <= icmp_ln15_reg_193;
        icmp_ln15_reg_193_pp0_iter2_reg <= icmp_ln15_reg_193_pp0_iter1_reg;
        icmp_ln15_reg_193_pp0_iter3_reg <= icmp_ln15_reg_193_pp0_iter2_reg;
        icmp_ln15_reg_193_pp0_iter4_reg <= icmp_ln15_reg_193_pp0_iter3_reg;
        icmp_ln15_reg_193_pp0_iter5_reg <= icmp_ln15_reg_193_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln15_reg_193 == 1'd0))) begin
        k_reg_207 <= k_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln15_reg_193_pp0_iter1_reg == 1'd0))) begin
        pow_b_1_reg_217 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln15_reg_193_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_141 <= grp_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_2_reg_176 <= grp_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_3_reg_188 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_193 == 1'd0))) begin
        tmp_6_reg_212 <= grp_fu_138_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln15_reg_193_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_7_reg_222 <= grp_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_read_reg_170 <= x;
    end
end

always @ (*) begin
    if ((icmp_ln15_fu_147_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln15_reg_193 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_107_p4 = i_reg_197;
    end else begin
        ap_phi_mux_i_0_phi_fu_107_p4 = i_0_reg_103;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln15_reg_193 == 1'd0))) begin
        ap_phi_mux_k_0_phi_fu_73_p4 = k_reg_207;
    end else begin
        ap_phi_mux_k_0_phi_fu_73_p4 = k_0_reg_69;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln15_reg_193_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_pow_b_0_phi_fu_84_p4 = pow_b_1_reg_217;
    end else begin
        ap_phi_mux_pow_b_0_phi_fu_84_p4 = pow_b_0_reg_81;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_114_p0 = tmp_y_0_reg_91;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_114_p0 = ap_phi_mux_tmp_y_0_phi_fu_95_p4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_114_p0 = x_read_reg_170;
    end else begin
        grp_fu_114_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_114_p1 = tmp_y_0_reg_91;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_114_p1 = tmp_7_reg_222;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_114_p1 = 32'd3212836864;
    end else begin
        grp_fu_114_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_126_p0 = ap_phi_mux_pow_b_0_phi_fu_84_p4;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_126_p0 = b_reg_181;
    end else begin
        grp_fu_126_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_126_p1 = tmp_3_reg_188;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_126_p1 = b_reg_181;
    end else begin
        grp_fu_126_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_131_p0 = ap_phi_mux_pow_b_0_phi_fu_84_p4;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_131_p0 = reg_141;
    end else begin
        grp_fu_131_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_131_p1 = 32'd1060205080;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_131_p1 = tmp_6_reg_212;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_131_p1 = tmp_2_reg_176;
    end else begin
        grp_fu_131_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln15_fu_147_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln15_fu_147_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd51];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_tmp_y_0_phi_fu_95_p4 = tmp_y_0_reg_91;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_138_p0 = ap_phi_mux_k_0_phi_fu_73_p4;

assign i_fu_153_p2 = (ap_phi_mux_i_0_phi_fu_107_p4 + 5'd1);

assign icmp_ln15_fu_147_p2 = ((ap_phi_mux_i_0_phi_fu_107_p4 == 5'd21) ? 1'b1 : 1'b0);

assign k_fu_164_p2 = (k_0_reg_69 + 6'd2);

endmodule //l_log2
